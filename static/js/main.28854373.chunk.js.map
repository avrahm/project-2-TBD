{"version":3,"sources":["components/ListOfParks/ListOfParks.js","components/ListOfEvents/ListOfEvents.js","components/SinglePark/SinglePark.js","components/AddNewEvent/AddNewEvent.js","components/Header/Header.js","components/SingleEvent/SingleEvent.js","App.js","registerServiceWorker.js","index.js"],"names":["List","showParks","props","listOfParks","map","eachPark","i","className","key","to","attributes","ID","NAME","ADDRESS","PHONE","this","Component","ListOfEvents","deleteEvent","e","deleteId","target","name","Axios","delete","then","res","console","log","catch","err","showEvents","listOfEvents","eachEvent","_id","event","onClick","state","ready","Single","thePark","find","park","match","params","id","LAT","LON","React","AddNewEvent","handleInput","setState","value","address","description","sport","date","time","user","message","onSubmit","submitEventFunction","htmlFor","type","onChange","height","Header","SingleEvent","theEvent","App","theParksFromMiamiDade","theEventsFromIronrest","submitNewEvent","preventDefault","newEvent","axios","post","eventCopy","push","data","ops","setTimeout","history","get","theResults","x","features","exact","path","render","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.28854373.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n// import Header from \"../Header/Header\";\n\nexport default class List extends Component {\n  showParks = () => {\n    return this.props.listOfParks.map((eachPark, i) => {\n      // console.log(eachPark.attributes.ID)\n      return (\n        <div className=\"container d-flex flex-row\" key={i}>\n          {/* <div className=\"col-4\">\n            <img src={eachPark.fac} alt={eachPark.name} height=\"100px\" />\n          </div> */}\n          <div className=\"col-8\">\n            <Link to={\"/singlepark/\" + eachPark.attributes.ID}>\n              <h4 className=\"name\">{eachPark.attributes.NAME}</h4>\n            </Link>\n            Address: {eachPark.attributes.ADDRESS}\n            <p className=\"contributor\">Phone: {eachPark.attributes.PHONE}</p>\n          </div>\n        </div>\n      );\n    });\n  };\n  render() {\n    // console.log(this.props.listOfParks)\n    if (this.props.listOfParks)\n      return (\n        <div>\n          {/* <Header /> */}\n          <h1>List of Parks</h1>\n          {this.showParks()}\n        </div>\n      );\n    else return <div>loading...</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n// import Header from \"../Header/Header\";\nimport Axios from 'axios'\n\nexport default class ListOfEvents extends Component {\nconstructor(){\n  super()\n  this.state = {\n    // listOfEvents: {...this.props.listOfEvents}\n  }\n}\n  deleteEvent = (e) => {\n   let deleteId = e.target.name\n    Axios.delete('https://ironrest.herokuapp.com/avrahm/'+ deleteId)\n    .then(res=>{\n      console.log('deleted')\n      // this.setState({\n      //   listOfEvents: res})\n      })\n      .catch(err=>{\n        console.log(err)\n      })\n    \n    // console.log(e.target.name)\n  }\n\n  showEvents = () => {\n    console.log(this.props.listOfEvents)\n    return this.props.listOfEvents.map((eachEvent, i) => {\n      // console.log(eachEvent)\n\n      return (\n        <div className=\"container d-flex flex-row\" key={i}>\n          {/* <div className=\"col-4\">\n            <img src={eachEvent.fac} alt={eachEvent.name} height=\"100px\" />\n          </div> */}\n          <div className=\"col-8\">\n            <Link to={\"/singleevent/\" + eachEvent._id}>\n              <h4 className=\"name\">{eachEvent.event.name}</h4></Link><button name={eachEvent._id} onClick={this.deleteEvent}>delete</button>\n            \n            {/* Date: {eachEvent[i].date} */}\n            {/* <p className=\"contributor\">Phone: {eachEvent.PHONE}</p> */}\n          </div>\n        </div>\n      );\n    });\n  };\n\n\n\n  render() {\n    // console.log(this.props.listOfEvents)\n    // console.log(this.props.listOfEvents)\n    if(this.props.ready)\n    return (\n\n      <div>\n        {/* <Header /> */}\n\n        <h1>List of Events</h1>\n\n        {this.showEvents()}\n\n      </div>\n    )\n    else\n    return(<div>Loading...</div>)\n  }\n}\n","import React from \"react\";\n// import Header from \"../Header/Header\";\n\nclass Single extends React.Component {\n  render() {\n    if (this.props.listOfParks) {\n      // console.log(this.props.listOfParks)\n\n      let thePark = this.props.listOfParks.find(park => {\n        return park.attributes.ID === this.props.match.params.id;\n      });\n      return (\n        <div>\n          {/* <Header /> */}\n          <div className=\"container d-flex flex-column\">\n            <div>\n              {/* <img src={thePark.attributes.iD} alt={thePark.name} width=\"100px\" /> */}\n            </div>\n            <div>\n              <h1>{thePark.attributes.NAME}</h1>\n              <h3 className=\"tagline\">Address: {thePark.attributes.ADDRESS}</h3>\n              <p>Phone: {thePark.attributes.PHONE}</p>\n              <p>Latitude: {thePark.attributes.LAT}</p>\n              <p>Longitude: {thePark.attributes.LON}</p>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return <h1>Loading....</h1>;\n    }\n  }\n}\nexport default Single;\n","import React, { Component } from \"react\";\nimport Axios from \"axios\";\n// import Header from \"../HomeHeader/HomeHeader\";\n\nexport default class AddNewEvent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      \n        name: \"\",\n        address: \"\",\n        description: \"\",\n        sport: \"\",\n        date: \"\",\n        time: \"\",\n        user: \"\",\n        message: \"\"\n      \n    };\n  }\n  handleInput = e => {\n    // console.log(e.target.value)\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // submitNewEvent = e => {\n  //   e.preventDefault();\n\n  //   const event = { \n  //     name: this.state.name,\n  //     address: this.state.address,\n  //     description: this.state.description,\n  //     sport: this.state.sport,\n  //     date: this.state.date,\n  //     time: this.state.time,\n  //     user: this.state.user\n  //   }\n    \n  \n    \n  //   Axios.post(\"https://ironrest.herokuapp.com/avrahm\", {event: {event}})\n  //   .then(res => {\n  //     // console.log(event)\n  //     // console.log(res)\n  //     this.setState({\n  //       message: \"Posted Successfully\"\n  //     })\n  //   })\n  //   .catch(err => {\n  //     // console.error(err)\n  //     this.setState({\n  //       message: \"Error!\"\n  //     })\n  //   })\n  // };\n\n  render() {\n    return (\n      <div>\n      {/* <Header /> */}\n      <h1>{this.props.message}</h1>\n        <form className=\"container\" onSubmit={e => {\n            this.props.submitEventFunction(\n              e,\n              this.state.name,\n              this.state.address,\n              this.state.description,\n              this.state.sport,\n              this.state.date,\n              this.state.time,\n              this.state.user\n            );\n            console.log(this.props)\n          }}>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"name\"\n            onChange={this.handleInput}\n            value={this.state.name}\n          />\n          <label htmlFor=\"address\">Address</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"address\"\n            onChange={this.handleInput}\n            value={this.state.address}\n          />\n          <label htmlFor=\"description\">Description</label>\n          <textarea\n            className=\"form-control\"\n            type=\"text\"\n            name=\"description\"\n            height=\"100px\"\n            onChange={this.handleInput}\n            value={this.state.description}\n          ></textarea>\n          <label htmlFor=\"sport\">Sport</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"sport\"\n            onChange={this.handleInput}\n            value={this.state.sport}\n          />\n          <label htmlFor=\"date\">Date</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"date\"\n            onChange={this.handleInput}\n            value={this.state.date}\n          />\n          <label htmlFor=\"time\">Time</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"time\"\n            onChange={this.handleInput}\n            value={this.state.time}\n          />\n          <label htmlFor=\"user\">User</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"user\"\n            onChange={this.handleInput}\n            value={this.state.user}\n          />\n          <button className=\"button btn-lg\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Header extends Component {\n\n  render() {\n   \n\n    return (\n      <div className={\"container\"}>\n      {/* <Link to=\"/singleevent/\" className=\"btn btn-lg btn-outline-danger\">\n      <h3>Random Event</h3>\n      </Link><br /> */}\n        <Link to=\"/listevent/\" className=\"btn btn-lg btn-outline-danger\">\n        <h3>List of Events</h3>\n        </Link><br />\n        <Link to=\"/listpark/\" className=\"btn btn-lg btn-outline-success\">\n        <h3>List of Parks</h3>\n        </Link><br />\n        {/* <Link to=\"/randompark/\" className=\"btn btn-lg btn-outline-success\">\n        <h3>Random Park</h3>\n        </Link><br /> */}\n        <Link to=\"/new/\" className=\"btn btn-lg btn-outline-success\">\n        <h3>Add a Event</h3>\n        </Link><br />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// import axios from \"axios\";\n// import Header from \"../Header/Header\";\n// import Axios from \"axios\";\n\nclass SingleEvent extends React.Component {\n  \n  \n\n  render(){\n    // console.log(this.state.theEvent)\n\n\n    if (this.props.listOfEvents) {\n\n\n      let theEvent = this.props.listOfEvents.find(event => {\n        return event._id === this.props.match.params.id;\n      });\n      return (\n        <div className=\"App\">\n        {/* <Header /> */}\n          SingleEvent\n          {theEvent._id}\n        </div>\n      );\n    } else {\n      return <h1>Loading....</h1>;\n    }\n  }\n}\n\nexport default SingleEvent;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListOfPark from \"./components/ListOfParks/ListOfParks\";\nimport ListOfEvents from \"./components/ListOfEvents/ListOfEvents\";\nimport SinplePark from \"./components/SinglePark/SinglePark\";\n// import Random from \"./components/RandomPark/RandomPark\";\nimport AddNewEvent from \"./components/AddNewEvent/AddNewEvent\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport axios from \"axios\";\nimport SingleEvent from \"./components/SingleEvent/SingleEvent\";\n\nclass App extends Component {\n  state = {\n    theParksFromMiamiDade: null,\n    theEventsFromIronrest: null,\n    ready: false,\n    message: '',\n  };\n  componentDidMount() {\n    //Miami Dade Parks and Recs JSON API\n    axios\n      .get(\n        \"https://gisweb.miamidade.gov/arcgis/rest/services/Parks/MD_Parks305/MapServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json\"\n      )\n      .then(theResults => {\n        let x = theResults.data.features;\n        this.setState({\n          theParksFromMiamiDade: x,\n          ready: true\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    //Events from IronRest\n    axios\n      .get(\"https://ironrest.herokuapp.com/avrahm\")\n      .then(res => {\n        let x = res.data;\n        console.log(x)\n        this.setState({\n          theEventsFromIronrest: x,\n          ready: true\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n  \n  submitNewEvent = (e, name,address,description,sport,date,time,user) => {\n    e.preventDefault();\n\n    // let theEventsCopy = {...this.state.theEventsFromIronrest}\n    \n    const newEvent = { \n        name: name,\n        address: address,\n        description: description,\n        sport: sport,\n        date: date,\n        time: time,\n        user: user\n      }\n    \n      axios.post(\"https://ironrest.herokuapp.com/avrahm\", {event: newEvent})\n      .then(res => {\n        let eventCopy = [...this.state.theEventsFromIronrest];\n        console.log(res)\n        eventCopy.push(res.data.ops[0])\n        // console.log(event)\n      // console.log(res)\n      this.setState({\n      \n        message: \"Posted Successfully\",\n        theEventsFromIronrest: eventCopy,\n      }, ()=>\n      setTimeout(() => {\n        this.setState({\n          message: ''\n        })\n        this.props.history.push('/singleevent/'+res.data.ops[0]._id)\n      }, 10000)\n      )\n    })\n    .catch(err => {\n      // console.error(err)\n      this.setState({\n        message: \"Error!\"\n      })\n    })\n  };\n\n  render() {\n    {console.log(this.props)}\n    if (this.state.ready) {\n      return (\n        <div className=\"App\">\n          <Header />\n          <Switch>\n            {/* <Route exact path=\"/\" component={Header} /> */}\n            <Route\n              exact\n              path=\"/listpark/\"\n              render={props => (\n                <ListOfPark\n                  {...props}\n                  listOfParks={this.state.theParksFromMiamiDade}\n                  ready={this.state.ready}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/singlepark/:id\"\n              render={props => (\n                <SinplePark\n                  {...props}\n                  listOfParks={this.state.theParksFromMiamiDade}\n                  ready={this.state.ready}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/listevent/\"\n              render={props => (\n                <ListOfEvents\n                  {...props}\n                  listOfEvents={this.state.theEventsFromIronrest}\n                  ready={this.state.ready}\n                />\n              )}\n            />\n            <Route exact path=\"/singleevent/:id\" render={props => (\n                <SingleEvent\n                  {...props}\n                  listOfEvents={this.state.theEventsFromIronrest}\n                  ready={this.state.ready}\n                  message={this.state.message}\n                />\n              )}/>\n            <Route exact path=\"/new/\" render={props => (\n                <AddNewEvent\n                  {...props}\n                  // listOfEvents={this.state.theEventsFromIronrest}\n                  message={this.state.message}\n                  submitEventFunction={this.submitNewEvent} \n                />\n              )} />\n          </Switch>\n        </div>\n      );\n    } else {\n      return <h1>Loading....</h1>;\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}